(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@swimlane/dragula'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@swimlane/ngx-dnd', ['exports', '@angular/core', '@swimlane/dragula', '@angular/common'], factory) :
    (factory((global.swimlane = global.swimlane || {}, global.swimlane['ngx-dnd'] = {}),global.ng.core,null,global.ng.common));
}(this, (function (exports,core,dragulaNamespace,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // see https://github.com/dherges/ng-packagr/issues/217
    var /** @type {?} */ dragula = dragulaNamespace;
    /**
     * Central service that handles all events
     *
     * @export
     */
    var DrakeStoreService = (function () {
        function DrakeStoreService() {
            this.droppableMap = new WeakMap();
            this.draggableMap = new WeakMap();
            this.dragulaOptions = this.createDrakeOptions();
            this.drake = dragula([], this.dragulaOptions);
            this.registerEvents();
        }
        /**
         * @param {?} droppable
         * @return {?}
         */
        DrakeStoreService.prototype.register = /**
         * @param {?} droppable
         * @return {?}
         */
            function (droppable) {
                this.droppableMap.set(droppable.container, droppable);
                this.drake.containers.push(droppable.container);
            };
        /**
         * @param {?} droppable
         * @return {?}
         */
        DrakeStoreService.prototype.remove = /**
         * @param {?} droppable
         * @return {?}
         */
            function (droppable) {
                this.droppableMap.delete(droppable.container);
                var /** @type {?} */ idx = this.drake.containers.indexOf(droppable.container);
                if (idx > -1) {
                    this.drake.containers.splice(idx, 1);
                }
            };
        /**
         * @param {?} draggable
         * @return {?}
         */
        DrakeStoreService.prototype.registerDraggable = /**
         * @param {?} draggable
         * @return {?}
         */
            function (draggable) {
                this.draggableMap.set(draggable.element, draggable);
            };
        /**
         * @param {?} draggable
         * @return {?}
         */
        DrakeStoreService.prototype.removeDraggable = /**
         * @param {?} draggable
         * @return {?}
         */
            function (draggable) {
                this.draggableMap.delete(draggable.element);
            };
        /**
         * @return {?}
         */
        DrakeStoreService.prototype.createDrakeOptions = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ accepts = function (el, target /*, source: any, sibling: any */) {
                    if (el.contains(target)) {
                        return false;
                    }
                    var /** @type {?} */ elementComponent = _this.draggableMap.get(el);
                    var /** @type {?} */ targetComponent = _this.droppableMap.get(target);
                    if (elementComponent && targetComponent) {
                        return elementComponent.dropZones.includes(targetComponent.dropZone);
                    }
                    return true;
                };
                var /** @type {?} */ copy = function (_, source) {
                    var /** @type {?} */ sourceComponent = _this.droppableMap.get(source);
                    if (sourceComponent) {
                        return sourceComponent.copy;
                    }
                    return false;
                };
                var /** @type {?} */ moves = function (el, source, handle, sibling) {
                    var /** @type {?} */ elementComponent = _this.draggableMap.get(el);
                    if (elementComponent) {
                        return elementComponent.moves(source, handle, sibling);
                    }
                    return true;
                };
                return { accepts: accepts, copy: copy, moves: moves, revertOnSpill: true, direction: 'vertical' };
            };
        /**
         * @return {?}
         */
        DrakeStoreService.prototype.registerEvents = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ dragElm;
                var /** @type {?} */ draggedItem;
                this.drake.on('drag', function (el, source) {
                    draggedItem = undefined;
                    dragElm = el;
                    if (!el || !source) {
                        return;
                    }
                    if (_this.draggableMap.has(el)) {
                        var /** @type {?} */ elementComponent = _this.draggableMap.get(el);
                        draggedItem = elementComponent.model;
                        elementComponent.drag.emit({
                            type: 'drag',
                            el: el,
                            source: source,
                            value: draggedItem
                        });
                    }
                    if (_this.droppableMap.has(source)) {
                        var /** @type {?} */ sourceComponent = _this.droppableMap.get(source);
                        _this.dragulaOptions.removeOnSpill = sourceComponent.removeOnSpill;
                        sourceComponent.drag.emit({
                            type: 'drag',
                            el: el,
                            source: source,
                            sourceComponent: sourceComponent,
                            value: draggedItem
                        });
                    }
                });
                this.drake.on('drop', function (el, target, source) {
                    var /** @type {?} */ targetComponent = _this.droppableMap.get(target);
                    if (!targetComponent) {
                        // not a target, abort
                        return;
                    }
                    var /** @type {?} */ dropElmModel = draggedItem;
                    var /** @type {?} */ dropIndex = Array.prototype.indexOf.call(target.children, el);
                    if (dropIndex < 0) {
                        // dropIndex is bad... cancel
                        // dropIndex is bad... cancel
                        _this.drake.cancel(true);
                        return;
                    }
                    var /** @type {?} */ sourceComponent = _this.droppableMap.get(source);
                    if (sourceComponent) {
                        var /** @type {?} */ sourceModel = sourceComponent.model;
                        var /** @type {?} */ targetModel = targetComponent.model;
                        var /** @type {?} */ hasDragModel = !!(sourceModel && draggedItem);
                        var /** @type {?} */ dragIndex = hasDragModel ? sourceModel.indexOf(draggedItem) : -1;
                        if (hasDragModel && dragIndex < 0) {
                            // dragIndex is bad... cancel
                            // dragIndex is bad... cancel
                            _this.drake.cancel(true);
                            return;
                        }
                        if (targetModel) {
                            var /** @type {?} */ reorder = dragIndex > -1 && sourceModel && target === source;
                            var /** @type {?} */ copy = !sourceModel || dragElm !== el;
                            if (reorder) {
                                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
                            }
                            else {
                                if (el.parentNode === target) {
                                    target.removeChild(el);
                                }
                                if (copy) {
                                    dropElmModel = JSON.parse(JSON.stringify(dropElmModel));
                                }
                                else {
                                    if (el.parentNode !== source) {
                                        // add element back, let angular remove it
                                        // add element back, let angular remove it
                                        _this.drake.cancel(true);
                                    }
                                    sourceModel.splice(dragIndex, 1);
                                }
                                targetModel.splice(dropIndex, 0, dropElmModel);
                            }
                        }
                    }
                    targetComponent.drop.emit({
                        type: 'drop',
                        el: el,
                        source: source,
                        value: dropElmModel,
                        dropIndex: dropIndex
                    });
                });
                this.drake.on('remove', function (el, container, source) {
                    if (_this.droppableMap.has(source)) {
                        var /** @type {?} */ sourceComponent = _this.droppableMap.get(source);
                        var /** @type {?} */ sourceModel = sourceComponent.model;
                        var /** @type {?} */ dragIndex = draggedItem && sourceModel ? sourceModel.indexOf(draggedItem) : -1;
                        if (dragIndex > -1) {
                            if (el.parentNode !== source) {
                                // add element back, let angular remove it
                                source.appendChild(el);
                            }
                            sourceModel.splice(dragIndex, 1);
                        }
                        sourceComponent.remove.emit({
                            type: 'remove',
                            el: el,
                            container: container,
                            source: source,
                            value: draggedItem
                        });
                    }
                });
                this.drake.on('cancel', function (el, container, source) {
                    if (_this.droppableMap.has(container)) {
                        var /** @type {?} */ containerComponent = _this.droppableMap.get(container);
                        containerComponent.cancel.emit({
                            type: 'cancel',
                            el: el,
                            container: container,
                            source: source,
                            value: draggedItem
                        });
                    }
                });
                this.drake.on('over', function (el, container, source) {
                    if (_this.droppableMap.has(container)) {
                        var /** @type {?} */ containerComponent = _this.droppableMap.get(container);
                        containerComponent.over.emit({
                            type: 'over',
                            el: el,
                            container: container,
                            source: source,
                            value: draggedItem
                        });
                    }
                });
                this.drake.on('out', function (el, container, source) {
                    if (_this.droppableMap.has(container)) {
                        var /** @type {?} */ containerComponent = _this.droppableMap.get(container);
                        containerComponent.out.emit({
                            type: 'out',
                            el: el,
                            container: container,
                            source: source,
                            value: draggedItem
                        });
                    }
                });
            };
        DrakeStoreService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        DrakeStoreService.ctorParameters = function () { return []; };
        return DrakeStoreService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ i = 10000;
    /**
     * @return {?}
     */
    function getNextId() {
        return i++;
    }
    /**
     * Makes the container droppable and children draggable.
     *
     * @export
     */
    var DroppableDirective = (function () {
        function DroppableDirective(el, renderer, drakesService) {
            this.el = el;
            this.renderer = renderer;
            this.drakesService = drakesService;
            this.copy = false;
            this.removeOnSpill = false;
            this.drop = new core.EventEmitter();
            this.drag = new core.EventEmitter();
            this.over = new core.EventEmitter();
            this.out = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
        }
        Object.defineProperty(DroppableDirective.prototype, "container", {
            get: /**
             * @return {?}
             */ function () {
                return this.el.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DroppableDirective.prototype, "dropZone", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropZone || this.ngxDroppable || this.defaultZone;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._dropZone = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DroppableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.defaultZone = "@@DefaultDropZone-" + getNextId() + "@@";
                this.drakesService.register(this);
            };
        /**
         * @return {?}
         */
        DroppableDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.over.subscribe(function () {
                    _this.renderer.addClass(_this.container, 'gu-over');
                });
                this.out.subscribe(function () {
                    _this.renderer.removeClass(_this.container, 'gu-over');
                });
            };
        /**
         * @return {?}
         */
        DroppableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.drakesService.remove(this);
            };
        DroppableDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxDroppable]' },] },
        ];
        /** @nocollapse */
        DroppableDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.Renderer2, },
                { type: DrakeStoreService, },
            ];
        };
        DroppableDirective.propDecorators = {
            "model": [{ type: core.Input },],
            "copy": [{ type: core.Input },],
            "removeOnSpill": [{ type: core.Input },],
            "ngxDroppable": [{ type: core.Input },],
            "drop": [{ type: core.Output },],
            "drag": [{ type: core.Output },],
            "over": [{ type: core.Output },],
            "out": [{ type: core.Output },],
            "remove": [{ type: core.Output },],
            "cancel": [{ type: core.Output },],
            "dropZone": [{ type: core.Input },],
        };
        return DroppableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Adds properties and events to draggable elements
     *
     * @export
     */
    var DraggableDirective = (function () {
        function DraggableDirective(el, drakesService, droppableDirective) {
            this.el = el;
            this.drakesService = drakesService;
            this.droppableDirective = droppableDirective;
            this._moves = true;
            /*
              ContentChildren doesn't get children created with NgTemplateOutlet
              See https://github.com/angular/angular/issues/14842
              Implemented via updateElements method
            
              @ContentChildren(DragHandleDirective, {descendants: true})
              handlesList: QueryList<DragHandleDirective>; */
            this.handles = [];
            this.drag = new core.EventEmitter();
            this.dragDelay = 200;
            this.dragDelayed = true;
        }
        Object.defineProperty(DraggableDirective.prototype, "dropZones", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropZones || this.ngxDraggable || this._parentDropzones;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._dropZones = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DraggableDirective.prototype, "hasHandle", {
            get: /**
             * @return {?}
             */ function () {
                return !!this.handles.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DraggableDirective.prototype, "element", {
            get: /**
             * @return {?}
             */ function () {
                return this.el.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} e
         * @return {?}
         */
        DraggableDirective.prototype.onMove = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!this._moves || this.dragDelayed) {
                    e.stopPropagation();
                    clearTimeout(this.touchTimeout);
                }
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.onDown = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this._moves) {
                    this.touchTimeout = setTimeout(function () {
                        _this.dragDelayed = false;
                    }, this.dragDelay);
                }
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.onUp = /**
         * @return {?}
         */
            function () {
                if (this._moves) {
                    clearTimeout(/** @type {?} */ (this.touchTimeout));
                    this.dragDelayed = true;
                }
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.update();
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.update = /**
         * @return {?}
         */
            function () {
                this._parentDropzones = [this.droppableDirective.dropZone];
                this.drakesService.registerDraggable(this);
                this.updateElements();
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.drakesService.removeDraggable(this);
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.updateElements = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ nativeElement = this.el.nativeElement;
                var /** @type {?} */ handles = nativeElement.querySelectorAll('[ngxdraghandle]');
                this.handles = Array.from(handles).filter(function (h) { return findFirstDraggableParent(h) === nativeElement; });
                /**
                 * @param {?} c
                 * @return {?}
                 */
                function findFirstDraggableParent(c) {
                    while (c.parentNode) {
                        c = c.parentNode;
                        if (c.hasAttribute && c.hasAttribute('ngxdraggable')) {
                            return c;
                        }
                    }
                }
            };
        /**
         * @param {?=} source
         * @param {?=} handle
         * @param {?=} sibling
         * @return {?}
         */
        DraggableDirective.prototype.canMove = /**
         * @param {?=} source
         * @param {?=} handle
         * @param {?=} sibling
         * @return {?}
         */
            function (source, handle, sibling) {
                if (typeof this._moves === 'boolean')
                    return this._moves;
                if (typeof this._moves === 'function')
                    return this._moves(this.model, source, handle, sibling);
                return true;
            };
        /**
         * @param {?} source
         * @param {?} handle
         * @param {?} sibling
         * @return {?}
         */
        DraggableDirective.prototype.moves = /**
         * @param {?} source
         * @param {?} handle
         * @param {?} sibling
         * @return {?}
         */
            function (source, handle, sibling) {
                if (!this.canMove(source, handle, sibling))
                    return false;
                return this.hasHandle ? this.handles.some(function (h) { return handelFor(handle, h); }) : true;
                /**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                function handelFor(c, p) {
                    if (c === p)
                        return true;
                    while ((c = c.parentNode) && c !== p)
                        ; // tslint:disable-line
                    return !!c;
                }
            };
        /**
         * @return {?}
         */
        DraggableDirective.prototype.ngDoCheck = /**
         * @return {?}
         */
            function () {
                this.updateElements();
            };
        DraggableDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxDraggable]' },] },
        ];
        /** @nocollapse */
        DraggableDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: DrakeStoreService, },
                { type: DroppableDirective, },
            ];
        };
        DraggableDirective.propDecorators = {
            "ngxDraggable": [{ type: core.Input },],
            "model": [{ type: core.Input },],
            "dropZones": [{ type: core.Input },],
            "_moves": [{ type: core.Input, args: ['moves',] },],
            "drag": [{ type: core.Output },],
            "onMove": [{ type: core.HostListener, args: ['touchmove', ['$event'],] },],
            "onDown": [{ type: core.HostListener, args: ['touchstart',] },],
            "onUp": [{ type: core.HostListener, args: ['touchend',] },],
        };
        return DraggableDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Adds properties and events to drag handle elements
     *
     * @export
     */
    var DragHandleDirective = (function () {
        function DragHandleDirective() {
        }
        DragHandleDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxDragHandle]' },] },
        ];
        return DragHandleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ i$1 = 0;
    /**
     * @return {?}
     */
    function getNextId$1() {
        return i$1++;
    }
    /**
     * Component that allows nested ngxDroppable and ngxDraggables
     *
     * @export
     */
    var ContainerComponent = (function () {
        function ContainerComponent() {
            this.copy = false;
            this.removeOnSpill = false;
            this.dropZone = "@@DefaultDropZone-" + getNextId$1() + "@@";
            this.drop = new core.EventEmitter();
            this.drag = new core.EventEmitter();
            this.over = new core.EventEmitter();
            this.out = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
        }
        Object.defineProperty(ContainerComponent.prototype, "dropZones", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropZones || this._defaultZones;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._dropZones = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ContainerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this._defaultZones = [this.dropZone];
            };
        /**
         * @return {?}
         */
        ContainerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.droppable.drag.subscribe(function (v) { return _this.drag.emit(v); });
                this.droppable.drop.subscribe(function (v) { return _this.drop.emit(v); });
                this.droppable.over.subscribe(function (v) { return _this.over.emit(v); });
                this.droppable.out.subscribe(function (v) { return _this.out.emit(v); });
                this.droppable.remove.subscribe(function (v) { return _this.remove.emit(v); });
                this.droppable.cancel.subscribe(function (v) { return _this.cancel.emit(v); });
            };
        ContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-dnd-container',
                        template: "<div\n  ngxDroppable\n  [dropZone]=\"dropZone\"\n  [model]=\"model\"\n  [copy]=\"copy\"\n  [ngClass]=\"{ 'gu-empty': !model?.length }\"\n  [removeOnSpill]=\"removeOnSpill\"\n  class='ngx-dnd-container'>\n  <ng-container *ngIf=\"model\">\n    <ng-container *ngFor=\"let item of model\">\n      <ngx-dnd-item\n        ngxDraggable\n        [model]=\"item\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [copy]=\"copy\"\n        [moves]=\"moves\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\">\n      </ngx-dnd-item>\n    </ng-container>\n  </ng-container>\n  <ng-content *ngIf=\"!model\"></ng-content>\n</div>\n",
                        styles: [".ngx-dnd-container{background-color:rgba(255,255,255,.2);border:2px solid red;margin:10px;padding:10px}.ngx-dnd-container.gu-empty{border:2px dotted red}.ngx-dnd-container:nth-child(odd){background-color:rgba(0,0,0,.2)}.ngx-dnd-container .ex-moved{background-color:#e74c3c}.ngx-dnd-container .ex-over{background-color:rgba(255,255,255,.3)}.ngx-dnd-container .handle{padding:0 5px;margin-right:5px;background-color:rgba(0,0,0,.4);cursor:move}.no-select{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}"],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        ContainerComponent.propDecorators = {
            "model": [{ type: core.Input },],
            "copy": [{ type: core.Input },],
            "removeOnSpill": [{ type: core.Input },],
            "droppableItemClass": [{ type: core.Input },],
            "dropZone": [{ type: core.Input },],
            "dropZones": [{ type: core.Input },],
            "moves": [{ type: core.Input },],
            "template": [{ type: core.Input }, { type: core.ContentChild, args: [core.TemplateRef,] },],
            "droppable": [{ type: core.Input }, { type: core.ViewChild, args: [DroppableDirective,] },],
            "drop": [{ type: core.Output },],
            "drag": [{ type: core.Output },],
            "over": [{ type: core.Output },],
            "out": [{ type: core.Output },],
            "remove": [{ type: core.Output },],
            "cancel": [{ type: core.Output },],
        };
        return ContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Component that allows nested ngxDroppable and ngxDraggables
     * Should only be use inside a ngx-dnd-container
     * Outside a ngx-dnd-container use ngxDroppable
     *
     * @export
     */
    var ItemComponent = (function () {
        function ItemComponent(container, draggableDirective) {
            this.container = container;
            this.draggableDirective = draggableDirective;
            this._copy = false;
            this._removeOnSpill = false;
        }
        Object.defineProperty(ItemComponent.prototype, "dropZone", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropZone || this.container.dropZone;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._dropZone = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "dropZones", {
            get: /**
             * @return {?}
             */ function () {
                return this._dropZones || this.container.dropZones;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._dropZones = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "droppableItemClass", {
            get: /**
             * @return {?}
             */ function () {
                return this._droppableItemClass || this.container.droppableItemClass;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._droppableItemClass = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "removeOnSpill", {
            get: /**
             * @return {?}
             */ function () {
                return typeof this._removeOnSpill === 'boolean' ? this._removeOnSpill : this.container.removeOnSpill;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._removeOnSpill = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "copy", {
            get: /**
             * @return {?}
             */ function () {
                return typeof this._copy === 'boolean' ? this._copy : this.container.copy;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._copy = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "hasHandle", {
            get: /**
             * @return {?}
             */ function () {
                return this.draggableDirective.hasHandle;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "moveDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return !this.draggableDirective.canMove();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "classString", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ itemClass = typeof this.droppableItemClass === 'function' ? this.droppableItemClass(this.model) : this.droppableItemClass;
                var /** @type {?} */ classes = ['ngx-dnd-item', itemClass || ''];
                if (this.moveDisabled) {
                    classes.push('move-disabled');
                }
                if (this.hasHandle) {
                    classes.push('has-handle');
                }
                return classes.join(' ');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ItemComponent.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                if (Array.isArray(this.model)) {
                    return 'array';
                }
                return typeof this.model;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.data = {
                    model: this.model,
                    type: this.type,
                    dropZone: this.dropZone,
                    template: this.container.template
                };
            };
        ItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-dnd-item',
                        template: "<ng-container [ngSwitch]=\"type\">\n\n  <ng-container *ngSwitchCase=\"'array'\">\n    <ngx-dnd-container\n      [model]=\"model\"\n      [template]=\"container.template\"\n      [dropZone]=\"dropZone\"\n      [dropZones]=\"dropZones\"\n      [removeOnSpill]=\"removeOnSpill\"\n      [droppableItemClass]=\"droppableItemClass\"\n      [copy]=\"copy\">\n    </ngx-dnd-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'object'\">\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <ng-container *ngIf=\"!container.template\">\n      <div\n        class=\"ngx-dnd-content\">\n        {{model.label}}\n      </div>\n      <ngx-dnd-container\n        *ngIf=\"model.children\"\n        [model]=\"model.children\"\n        [template]=\"container.template\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\"\n        [copy]=\"copy\">\n      </ngx-dnd-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'undefined'\">\n  </ng-container>\n\n  <ng-container *ngSwitchDefault>\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <div\n      *ngIf=\"!container.template\"\n      class=\"ngx-dnd-content\">\n      {{model}}\n    </div>\n  </ng-container>\n\n</ng-container>\n\n\n\n\n\n\n\n",
                        styles: [".ngx-dnd-item{margin:10px;padding:10px;background-color:rgba(0,0,0,.2);transition:opacity .4s ease-in-out;border:1px solid #add8e6;display:block}.ngx-dnd-item.has-handle [ngxDragHandle],.ngx-dnd-item.has-handle [ngxdraghandle],.ngx-dnd-item:not(.has-handle):not(.move-disabled){cursor:move;cursor:grab;cursor:-webkit-grab}.ngx-dnd-item .ngx-dnd-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-dnd-item:hover{border:1px solid #00f}.gu-mirror{position:fixed!important;margin:0!important;z-index:9999!important;opacity:.8}.gu-hide{display:none!important}.gu-unselectable{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}.gu-transit{opacity:.2}"],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        ItemComponent.ctorParameters = function () {
            return [
                { type: ContainerComponent, },
                { type: DraggableDirective, },
            ];
        };
        ItemComponent.propDecorators = {
            "model": [{ type: core.Input },],
            "dropZone": [{ type: core.Input },],
            "dropZones": [{ type: core.Input },],
            "droppableItemClass": [{ type: core.Input },],
            "removeOnSpill": [{ type: core.Input },],
            "copy": [{ type: core.Input },],
            "classString": [{ type: core.HostBinding, args: ['class',] },],
        };
        return ItemComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ components = [ContainerComponent, ItemComponent];
    var /** @type {?} */ directives = [DraggableDirective, DroppableDirective, DragHandleDirective];
    var NgxDnDModule = (function () {
        function NgxDnDModule() {
        }
        NgxDnDModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: __spread(components, directives),
                        exports: __spread(components, directives),
                        providers: [DrakeStoreService]
                    },] },
        ];
        return NgxDnDModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DraggableDirective = DraggableDirective;
    exports.DroppableDirective = DroppableDirective;
    exports.DragHandleDirective = DragHandleDirective;
    exports.ItemComponent = ItemComponent;
    exports.ContainerComponent = ContainerComponent;
    exports.DrakeStoreService = DrakeStoreService;
    exports.NgxDnDModule = NgxDnDModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,